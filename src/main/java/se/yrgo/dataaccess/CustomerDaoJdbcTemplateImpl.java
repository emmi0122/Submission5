package se.yrgo.dataaccess;

import java.sql.*;
import java.util.*;
import java.util.Date;

import org.springframework.jdbc.core.*;

import se.yrgo.domain.*;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?, ?, ?, ?, ?)";

    private static final String SELECT_BY_ID_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String SELECT_BY_NAME_SQL = "SELECT * FROM CUSTOMER WHERE COMPANY_NAME=?";
    private static final String SELECT_ALL_SQL = "SELECT * FROM CUSTOMER";

    private static final String INSERT_SQL_CALL = "INSERT INTO CUSTOMER_CALLS (CALL_TIME, NOTES, CUSTOMER_ID) VALUES (?, ?, ?)";
	private static final String GET_CALL_BY_CUSTOMERID = "SELECT * FROM TBL_CALL where CUSTOMER_ID=?";

    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
    }

    public void createTables() {
        try {
            template.update(
                "CREATE TABLE CUSTOMER (" +
                "CUSTOMER_ID VARCHAR(20) PRIMARY KEY, " +
                "COMPANY_NAME VARCHAR(100), " +
                "EMAIL VARCHAR (100), " +
                "TELEPHONE VARCHAR(20), " +
                "NOTES VARCHAR(225))"
            );
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Customer-tabellen finns redan.");
        }

        try {
            template.update(
                "CREATE TABLE CUSTOMER_CALLS (" +
                "CALL_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "CUSTOMER_ID VARCHAR(20), " +
                "CALL_TIME TIMESTAMP, " +
                "NOTES VARCHAR(255), " +
                "FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID))"
            );
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("CUSTOMER_CALLS-tabellen finns redan.");
        }
    }

    @Override
    public void create(Customer customer) {
        template.update(INSERT_SQL,
                customer.getCustomerId(),
                customer.getCompanyName(),
                customer.getEmail(),
                customer.getTelephone(),
                customer.getNotes());   
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        List<Customer> results = template.query(SELECT_BY_ID_SQL, new CustomerRowMapper(), customerId);

        if (results.isEmpty()) {
            throw new RecordNotFoundException();
        }
        return results.get(0);
    }

    @Override
    public List<Customer> getByName(String name) {
        return template.query(SELECT_BY_NAME_SQL, new CustomerRowMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        int rowsAffected = template.update(UPDATE_SQL,
                customerToUpdate.getCompanyName(),
                customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(),
                customerToUpdate.getNotes(),
                customerToUpdate.getCustomerId());
                
        if (rowsAffected == 0) {
            throw new RecordNotFoundException();
        }
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        int rowsAffected = template.update(DELETE_SQL, oldCustomer.getCustomerId());

        if (rowsAffected == 0) {
            throw new RecordNotFoundException();
        }
    }

    @Override
    public List<Customer> getAllCustomers() {
        return template.query(SELECT_ALL_SQL, new CustomerRowMapper());
    }

	@Override
	public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
		Customer customer = getById(customerId);
		List<Call> calls = template.query(GET_CALL_BY_CUSTOMERID, new CallRowMapper(),customerId);

		customer.setCalls(calls);

		return customer;
	}

	@Override
	public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        template.update(INSERT_SQL_CALL, 
            new java.sql.Timestamp(newCall.getTimeAndDate().getTime()), 
            newCall.getNotes(),
            customerId);
	}
}

class CustomerRowMapper implements RowMapper<Customer> {
	public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
        String customerId = rs.getString("CUSTOMER_ID");
        String companyName = rs.getString("COMPANY_NAME");
        String email = rs.getString("EMAIL");
        String telephone = rs.getString("TELEPHONE");
        String notes = rs.getString("NOTES");

        Customer customer = new Customer(customerId, companyName, email, telephone, notes);
        return customer;
    }
}

class CallRowMapper implements RowMapper<Call> {
	public Call mapRow(ResultSet rs, int arg1) throws SQLException {
        Date timeAndDate = rs.getTimestamp("CALL_TIME");
		String notes = rs.getString("NOTES");

		return new Call(notes, timeAndDate);
	}
}